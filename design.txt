Green Harvard – Design Documentation:
This project uses JavaScript, Python, flask, SQL, and HTML/CSS to produce a web application for energy usage. This documentation will walk through each aspect of the website and explain how it works under the hood.
---------------------------------------------------------------------------------
Registration/Login:
When a user registers, they must provide their freshman dorm and are given a unique user id. Their user id allows us to track their dorm information for when we add points to dorms for individual users completing tasks. Their dorm information allows us to set up the My Dorm and Yard page.
---------------------------------------------------------------------------------
Home Page (Dashboard + Tasks):
This portion of the website relies heavily on script.js since it adds and removes tasks and points dynamically. Each time an add task button is pressed, the function for creating a checkbox information is called in script.js. This function creates the information for the checkbox, and sends a POST call to the python application file. This POST call sends the task id to be updated in the tasks SQL table. In the SQL table for tasks, each task has a Boolean value. This value is changed every time the user creates or removes a task. The button for adding the selected task is then disabled so users can only add a task once. The function for creating the actual task checkbox to the HTML is called. In this function, we ensure that if the created checkbox is clicked, it will be deleted through a remove checkbox function. A POST call to application.py is again send to update the points for each dorm.

***After pressing the buttons to add tasks, if a user leaves tasks present, the site saves this information so the pending checkboxes can be displayed if home is opened again later. It does this by, upon opening the window, running a JavaScript function that gets truth values from the tasks table in SQL, and automatically clicking the buttons if these truth values are ‘true’. 

In application.py, different POST methods receive the info from the script.js to update the SQL tables for points and tasks. The index function in application.py sort through the points of each dorms form highest to lowest. It returns the index html templates for the display.

The leaderboard is created by grabbing the points and names of the dorms, and sorting them, and then displaying them in a table. We made the database information into tuples so they became sortable by pointage, and then put the tuple information (points, dorm) into two lists for easy maneuvering with Jinja (displayed with loops). 
---------------------------------------------------------------------------------
My Dorm and Yard:
This portion of the web application relies on application.py and helpers.py. In application.py, information about the user’s dorm energy usage is queried from the SQL table of 2016 energy usage. This SQL data is sourced from the Harvard Sustainability website under Energy Witness. The final values for different types of energy usage is the average over the year. The values queried in the myinfo method is then send to functions in helpers that return pie charts, bar charts, and tables. To create these charts and table, an API from Plotly is used. The returned charts and table is displayed through html templates that are called by the python functions
---------------------------------------------------------------------------------
Search Data – Dorm Data & Yard Data:
Through application.py, the dorm the user wants to find information on is received through POST method.  Similarly to My Dorm and Yard, based on the request dorm, information about the dorm energy usage is queried in the SQL energy2016 table. Depending on whether the user is trying to find information about a specific dorm or about a yard, different information will be retrieved. For single dorms, the energy information about that dorm is retrieved. For yard information, the energy usage for all dorms in that specific yard is retrieved. The information is retrieved and sent to helpers functions that create the appropriate charts. The charts are then returned to be displayed in the appropriate html templates.

In terms of design, all the dorms with information available are selected via a dropdown menu. This is because the dorm names downloaded from the Harvard Website have random spaces after them. Through the drop down menu, it would be a lot more intuitive for both the user, and for us retrieving the dorm name.
---------------------------------------------------------------------------------
Compare Data—Between Dorms & With World:
Users are able to compare data using these two pages. Functions in application.py retrieve that dorms and/or country the user wants to compare through a POST call. Based on the information the user has entered, the SQL tables containing appropriate information about either dorms or countries will be queried. Information about international energy usage was retrieve from the World Bank Energy Consumption report. Though the most recent information was used, this was energy usage of individuals in 2013. In terms of comparing between dorms, energy usage for each month over the year is retrieved. The total energy usage for each dorm is divided by the number of students residing in each dorm (the pc function in helpers). For comparison between a dorm and country. The dorm energy usage is summed up for the year and then divided by the number of students residing in the dorm.
---------------------------------------------------------------------------------
Design and HTML
The layout is based on a bootstrap template called SB Admin 2 (https://startbootstrap.com/template-overviews/sb-admin-2/).  CSS, Javascript, JQuery, and several plugins are taken directly from this template, and the HTML formatting is based off of it. All pages extend layout-new.html, which contains all navigation, and uses Jinja for title, header, and body. Jinja’s conditionals became very useful, especially in the context of creating alert boxes when forms were submitted without proper inputs (something we did to avoid using apology from previous psets), as we could basically “show”/”hide” these alerts depending on the state of user interaction. 
---------------------------------------------------------------------------------
Where the Data is Coming From 
•	World data: http://data.worldbank.org/indicator/EG.USE.ELEC.KH.PC
•	Harvard Data: http://www6.uos.harvard.edu/Reports/Pages/Folder.aspx?ReturnUrl=http%3A%2F%2Fwww6.uos.harvard.edu%2FReports%2FPages%2FReport.aspx%3FItemPath%3D%2FI.+Designed+for+Download%2FUtility+Data+Download+Report&_azp_token=-----BEGIN+PGP+MESSAGE-----%0D%0AVersion%3A+Cryptix+OpenPGP+0.20050418%0D%0A%0D%0AhQEOA9SFcQQBkKMmEAP%2BJDqvJd%2Bgf%2FimFmp2brM4KVN4djbIrFpYZtCIYoD95l1d%0D%0AL4AFI8%2BUEFU%2FjvsBwvJ1A3hVNOsGbY%2FY3X%2FGr%2BpeFdTRma%2FXOcYZbvXabkO6mkVH%0D%0AfHXjLyDXW5SkXO90BE56thhXDYUsH%2F%2FssgUsG9HDsBGOWi%2FH%2Fr1PLkckL4dZetsD%0D%0A%2FRNr%2F2aM5qjPaBeR%2F7ZM%2Fs5zTOlNnSfountyyJiIRGDnEsnU3%2BfK2NUuR%2Fchk%2By3%0D%0ABNkfaWNIy8jPW1609dWRcs9J7eibSOsiwgZcfQPBIH8rFF5U7dWfUBoyOWb3Xsq9%0D%0AexR8tjjggOlftqfeddMCGpf9S12Z28c5Ivecpzzvmpg9pPNUMYvyl1pU7rXHC7UM%0D%0AwMSR9H1cssGWbniCn%2BbUuDhMXzc7Ao7F1xNMutEpiAnGJdORJKkVdXrDkTjw8I13%0D%0AU%2BAVQ7REefQGT0rwUXt81fWUMj6nQGtgZeWFTpOhqYYqPbtnnHaEHZxLT0hugAQV%0D%0AR4LN5X54j1jre6ZpxVIa01GAc8Fn4Y%2BppeT4z0%2BYyGwKf43eHsEsKO%2FCPKroobS7%0D%0AkPFg8ObUNw5u4mzcOxRoaGCB28P3gHV3iwcYdu9XzI%2FPru1WwvQmZHTC7UFuCU2f%0D%0Ayo7hSpD027Gt9stoiC02di4fr6wwIhMFKXz41CSZ%2FJIXKdsubtc%3D%0D%0A%3DrHRq%0D%0A-----END+PGP+MESSAGE-----%0D%0A 